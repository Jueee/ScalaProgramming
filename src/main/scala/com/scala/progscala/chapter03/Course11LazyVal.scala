package com.scala.progscala.chapter03

/**
  * 惰性赋值
  *
  * 惰性赋值是与传名参数相关的技术，假如你希望以延迟的方式初始化某值，并且表达式不会被重复计算，则需要使用惰性赋值。
  *
  * 需要用到该技术的常见场景：
  * 1、由于表达式执行代价昂贵（例如：打开一个数据库连接），因此我们希望能推迟该操作，直到我们确实需要表达式结果值时才执行它。
  * 2、为了缩短模块的启动时间，可以将当前不需要的某些工作推迟执行。
  * 3、为了确保对象中其他的字段的初始化过程能优先执行，需要将某些字段惰性化。
  *
  * lazy 关键字意味着求值过程将会被推迟，只有需要时才会执行计算。
  *
  * 那么惰性赋值与方法调用有那些差别呢？
  * 对于方法调用而言，每次调用方法时方法体都会被执行；而惰性赋值则不然，首次使用该值时，用于初始化的 “ 代码体 ” 才会被执行一次。
  *
  * 这种只能执行一次的计算对于可变字段而言几乎没有任何意义。
  * 因此， lazy 关键字并不能用于修饰 var 变量。
  */
object Course11LazyVal {

  lazy val resource:Int = init()

  def init():Int={
    //  执行某些代价高昂的操作
    0
  }
}
