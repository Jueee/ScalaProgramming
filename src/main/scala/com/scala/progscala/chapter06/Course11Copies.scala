package com.scala.progscala.chapter06

/**
  * 关于复制
  *
  *
  * 让我们考虑一个实际问题。
  *
  * 为了保持变量的不变性，对有用的集合进行复制通常是必要的。
  * 但假设我有一个包含 100000  个元素的 Vector ，我需要得到一个副本，并替换掉原 Vector 的第 8  个元素。
  * 此时我们如果构造一个全新的 100 000  个元素的 Vector 将会是极其低效的。
  *
  * 幸运的是，我们不必付出这个低效的代价，也不必牺牲变量的不可变性。
  * 其中的秘诀就是，我们认识到其他 99 999  个元素并没有变化。
  *
  * 如果我们能够共享原始 Vector 中的不变部分，而以某种方式表示变化的部分，那么就可以高效地 “ 创建 ” 新 Vector 了。
  * 这种思想被称为结构共享。
  *
  * 如果其他线程中的代码正在对原始 Vector 做其他不同的操作，对原始 Vector 的复制不会影响该操作，因为原 Vector 没有被修改。
  * 这样，只要对旧版本有一个或多个引用，就可以创建一个 Vector 的 “ 历史 ” 版本。
  * 直到对旧版本的引用消失为止，旧版本才会被垃圾回收。
  *
  * 由于历史可以一直保留，使用了结构共享的数据结构被称为持久性数据结构。
  */
object Course11Copies {


}
